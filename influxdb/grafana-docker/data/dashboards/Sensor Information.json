{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "Display some data about all sensors in one overview - Eric",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "continuous-GrYlRd"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "ns"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "location"
            },
            "properties": [
              {
                "id": "unit",
                "value": "string"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 25,
        "w": 18,
        "x": 0,
        "y": 0
      },
      "id": 4,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "/^staleness$/",
          "limit": 1000,
          "values": true
        },
        "text": {
          "titleSize": 20,
          "valueSize": 20
        },
        "textMode": "value_and_name"
      },
      "pluginVersion": "8.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-uid"
          },
          "query": "now_time = uint(v: now())\n\nfrom(bucket: \"SharedAirDFW\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> last()\n  |> pivot(rowKey:[\"location\", \"_time\"], columnKey:[\"_field\"], valueColumn:\"_value\")\n  |> group(columns: [\"location\"])\n  |> keep(columns: [\"location\", \"_time\"])\n  |> last(column: \"_time\")\n  |> map(fn: (r) => ({ r with staleness: (now_time - uint(v: r._time)) }))\n  |> group()\n  |> sort(columns: [\"location\"])",
          "refId": "A"
        }
      ],
      "title": "Data Staleness per Device",
      "type": "stat"
    },
    {
      "description": "",
      "gridPos": {
        "h": 3,
        "w": 18,
        "x": 0,
        "y": 25
      },
      "id": 7,
      "options": {
        "content": "Once Geomaps support [data links](https://github.com/grafana/grafana/discussions/43124), make clicking markers link to another dashboard. This will enable users to \"drill down\" into the data. ",
        "mode": "markdown"
      },
      "pluginVersion": "8.3.6",
      "title": "Info on Geomaps",
      "type": "text"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [
            {
              "targetBlank": true,
              "title": "Test",
              "url": "http://google.com"
            }
          ],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "location"
            },
            "properties": [
              {
                "id": "unit",
                "value": "string"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 14,
        "w": 9,
        "x": 0,
        "y": 28
      },
      "id": 2,
      "options": {
        "basemap": {
          "config": {},
          "name": "Layer 0",
          "type": "default"
        },
        "controls": {
          "mouseWheelZoom": true,
          "showAttribution": false,
          "showDebug": false,
          "showScale": false,
          "showZoom": true
        },
        "layers": [
          {
            "config": {
              "showLegend": true,
              "style": {
                "color": {
                  "fixed": "dark-blue"
                },
                "opacity": 0.7,
                "rotation": {
                  "fixed": 0,
                  "max": 360,
                  "min": -360,
                  "mode": "mod"
                },
                "size": {
                  "fixed": 8,
                  "max": 15,
                  "min": 2
                },
                "symbol": {
                  "fixed": "img/icons/marker/circle.svg",
                  "mode": "fixed"
                },
                "text": {
                  "field": "location",
                  "fixed": "",
                  "mode": "field"
                },
                "textConfig": {
                  "fontSize": 16,
                  "offsetX": 14,
                  "offsetY": 0,
                  "textAlign": "left",
                  "textBaseline": "middle"
                }
              }
            },
            "location": {
              "latitude": "latitude",
              "longitude": "longitude",
              "mode": "auto"
            },
            "name": "Layer 1",
            "tooltip": true,
            "type": "markers"
          }
        ],
        "view": {
          "id": "coords",
          "lat": 32.789092,
          "lon": -96.75536,
          "zoom": 9.6
        }
      },
      "pluginVersion": "8.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-uid"
          },
          "query": "// For GPSGPGGA2 and GPSGPRMC2, the \"latitude\" is converted into \"latitudeCoordinate\" for us :)\nGPSGPGGA2andGPSGPRMC2 = from(bucket: \"SharedAirDFW\")\n  // Limit scope for smaller computation\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Take any processed (i.e. standard format) coordinate fields\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /GPSGPGGA2|GPSGPRMC2/ and r[\"_field\"] =~ /latitudeCoordinate|longitudeCoordinate/)\n  // Only care about most recent report. We do this again, but this one filters out the majority of data and speeds up computation\n  |> last(column: \"_time\")\n  // Pivot and group by location (and time, so the column doesnt go away)\n  |> pivot(rowKey:[\"location\", \"_time\"], columnKey:[\"_field\"], valueColumn:\"_value\")\n  // Rename to common name for joining\n  |> rename(columns: {latitudeCoordinate: \"latitude\", longitudeCoordinate: \"longitude\"})\n  // Join everything back into a single table\n  |> group()\n\n// For GPGALR, the longitude/latitude can be taken as-is\nGPGALR = from(bucket: \"SharedAirDFW\")\n  // Limit scope for smaller computation\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Take any processed (i.e. standard format) coordinate fields\n  |> filter(fn: (r) => r[\"_measurement\"] == \"GPGGALR\" and r[\"_field\"] =~ /latitude|longitude/)\n  // Only care about most recent report. We do this again, but this one filters out the majority of data and speeds up computation\n  |> last(column: \"_time\")\n  // Pivot and group by location (and time, so the column doesnt go away)\n  |> pivot(rowKey:[\"location\", \"_time\"], columnKey:[\"_field\"], valueColumn:\"_value\")\n  // Join everything back into a single table\n  |> group()\n\n// GPGALR\n\n// For GPGGA, we need to convert longitude/latitude ourselves :()\nGPGGA = from(bucket: \"SharedAirDFW\")\n  // Limit scope for smaller computation\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Take any processed (i.e. standard format) coordinate fields\n  |> filter(fn: (r) => r[\"_measurement\"] == \"GPGGA\" and r[\"_field\"] =~ /latitude|longitude/)\n  // Only care about most recent report. We do this again, but this one filters out the majority of data and speeds up computation\n  |> last(column: \"_time\")\n  // Pivot and group by location (and time, so the column doesnt go away)\n  |> pivot(rowKey:[\"location\", \"_time\"], columnKey:[\"_field\"], valueColumn:\"_value\")\n  // Divide by 100 to obtain real coordinates\n  |> map(fn: (r) => ({ r with latitude: r.latitude / 100.0, longitude: r.longitude / 100.0 }))\n  // Join everything back into a single table\n  |> group()\n\n// Union all of the GPS coordinate tables together. Basically just does concatination, because they have the same schemas\ncoordinates = union(tables: [GPSGPGGA2andGPSGPRMC2, GPGALR, GPGGA])\n  // Somtimes there are multiple GPS sensors on a single location/device. Take the latest one\n  |> group(columns: [\"location\"])\n  |> last(column: \"_time\")\n  |> group()\n  // We do not care about these rows\n  |> drop(columns: [\"_start\", \"_stop\", \"_time\"])\n  // Rename \"measurement\" for better UX\n  |> rename(columns: {_measurement: \"sensor\"})\n  \ncoordinates",
          "refId": "A"
        }
      ],
      "title": "Explore Sensors",
      "transformations": [],
      "type": "geomap"
    },
    {
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          },
          "unit": "none"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "location"
            },
            "properties": [
              {
                "id": "unit",
                "value": "string"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "pm10_0"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 3
                    }
                  ]
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 14,
        "w": 9,
        "x": 9,
        "y": 28
      },
      "id": 5,
      "options": {
        "basemap": {
          "config": {},
          "name": "Layer 0",
          "type": "default"
        },
        "controls": {
          "mouseWheelZoom": true,
          "showAttribution": false,
          "showDebug": false,
          "showScale": false,
          "showZoom": true
        },
        "layers": [
          {
            "config": {
              "showLegend": true,
              "style": {
                "color": {
                  "field": "pm10_0",
                  "fixed": "dark-blue"
                },
                "opacity": 0.5,
                "rotation": {
                  "fixed": 0,
                  "max": 360,
                  "min": -360,
                  "mode": "mod"
                },
                "size": {
                  "fixed": 8,
                  "max": 15,
                  "min": 2
                },
                "symbol": {
                  "fixed": "img/icons/marker/circle.svg",
                  "mode": "fixed"
                },
                "text": {
                  "field": "location",
                  "fixed": "",
                  "mode": "field"
                },
                "textConfig": {
                  "fontSize": 16,
                  "offsetX": 14,
                  "offsetY": 0,
                  "textAlign": "left",
                  "textBaseline": "middle"
                }
              }
            },
            "location": {
              "latitude": "latitude",
              "longitude": "longitude",
              "mode": "auto"
            },
            "name": "Layer 1",
            "tooltip": true,
            "type": "markers"
          }
        ],
        "view": {
          "id": "coords",
          "lat": 32.789092,
          "lon": -96.75536,
          "zoom": 9.6
        }
      },
      "pluginVersion": "8.3.6",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "influxdb-uid"
          },
          "query": "// For GPSGPGGA2 and GPSGPRMC2, the \"latitude\" is converted into \"latitudeCoordinate\" for us :)\nGPSGPGGA2andGPSGPRMC2 = from(bucket: \"SharedAirDFW\")\n  // Limit scope for smaller computation\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Take any processed (i.e. standard format) coordinate fields\n  |> filter(fn: (r) => r[\"_measurement\"] =~ /GPSGPGGA2|GPSGPRMC2/ and r[\"_field\"] =~ /latitudeCoordinate|longitudeCoordinate/)\n  // Only care about most recent report. We do this again, but this one filters out the majority of data and speeds up computation\n  |> last(column: \"_time\")\n  // Pivot and group by location (and time, so the column doesnt go away)\n  |> pivot(rowKey:[\"location\", \"_time\"], columnKey:[\"_field\"], valueColumn:\"_value\")\n  // Rename to common name for joining\n  |> rename(columns: {latitudeCoordinate: \"latitude\", longitudeCoordinate: \"longitude\"})\n  // Join everything back into a single table\n  |> group()\n\n// For GPGALR, the longitude/latitude can be taken as-is\nGPGALR = from(bucket: \"SharedAirDFW\")\n  // Limit scope for smaller computation\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Take any processed (i.e. standard format) coordinate fields\n  |> filter(fn: (r) => r[\"_measurement\"] == \"GPGGALR\" and r[\"_field\"] =~ /latitude|longitude/)\n  // Only care about most recent report. We do this again, but this one filters out the majority of data and speeds up computation\n  |> last(column: \"_time\")\n  // Pivot and group by location (and time, so the column doesnt go away)\n  |> pivot(rowKey:[\"location\", \"_time\"], columnKey:[\"_field\"], valueColumn:\"_value\")\n  // Join everything back into a single table\n  |> group()\n\n// GPGALR\n\n// For GPGGA, we need to convert longitude/latitude ourselves :()\nGPGGA = from(bucket: \"SharedAirDFW\")\n  // Limit scope for smaller computation\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  // Take any processed (i.e. standard format) coordinate fields\n  |> filter(fn: (r) => r[\"_measurement\"] == \"GPGGA\" and r[\"_field\"] =~ /latitude|longitude/)\n  // Only care about most recent report. We do this again, but this one filters out the majority of data and speeds up computation\n  |> last(column: \"_time\")\n  // Pivot and group by location (and time, so the column doesnt go away)\n  |> pivot(rowKey:[\"location\", \"_time\"], columnKey:[\"_field\"], valueColumn:\"_value\")\n  // Divide by 100 to obtain real coordinates\n  |> map(fn: (r) => ({ r with latitude: r.latitude / 100.0, longitude: r.longitude / 100.0 }))\n  // Join everything back into a single table\n  |> group()\n\n// Union all of the GPS coordinate tables together. Basically just does concatination, because they have the same schemas\ncoordinates = union(tables: [GPSGPGGA2andGPSGPRMC2, GPGALR, GPGGA])\n  // Somtimes there are multiple GPS sensors on a single location/device. Take the latest one\n  |> group(columns: [\"location\"])\n  |> last(column: \"_time\")\n  |> group()\n  // We do not care about these rows\n  |> drop(columns: [\"_start\", \"_stop\"])\n  // Rename \"measurement\" for better UX\n  |> rename(columns: {_measurement: \"gps-sensor\", _time: \"gps-updated-time\"})\n\npm = from(bucket: \"SharedAirDFW\")\n  // Limit scope for smaller computation\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_field\"] =~ /pm10(_0)?|pm5(_0)?|pm2_5/ )\n  |> last(column: \"_time\")\n  |> pivot(rowKey:[\"location\", \"_time\"], columnKey:[\"_field\"], valueColumn:\"_value\")\n  // Rename all pm10 to pm10_0, pm5 to pm5_0\n  |> rename(fn: (column) => (if column == \"pm10\" then \"pm10_0\" else if column == \"pm5\" then \"pm5_0\" else column))\n  |> group(columns: [\"location\"])\n  |> last(column: \"_time\")\n  |> group()\n  |> drop(columns: [\"_start\", \"_stop\"])\n  |> rename(columns: {_measurement: \"pm-sensor\", _time: \"pm-update-time\"})\n\njoin(tables: {a: coordinates, b: pm}, on: [\"location\"])\n",
          "refId": "A"
        }
      ],
      "title": "Particulate Matter",
      "transformations": [],
      "type": "geomap"
    }
  ],
  "schemaVersion": 34,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Sensor Information",
  "uid": "QFWQ9h_7k",
  "version": 1,
  "weekStart": ""
}