[
    {
        "id": "abe7cd58d86f0bc8",
        "type": "tab",
        "label": "ECMWF to WMS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bb0cdc88eda0b26d",
        "type": "inject",
        "z": "abe7cd58d86f0bc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "8f08df45252865fb"
            ]
        ]
    },
    {
        "id": "8f08df45252865fb",
        "type": "function",
        "z": "abe7cd58d86f0bc8",
        "name": "",
        "func": "var d = new Date(msg.payload);\nd.setHours(d.getHours() - 6); //need to set the hours behind by 6 (since update frequency is 6 hours behind UTC)\nvar day=d.getDate();  //day as a number 1 -31\nvar month=d.getMonth(); // month as a number 0-11\nvar year=String(d.getFullYear()); //year as a four digit number (yyyy)\nvar hours=d.getHours(); //the hour (0-23)\n\n\n//Making the date a valid format\nnewPayload = String(\"https://nomads.ncep.noaa.gov/pub/data/nccf/com/gfs/prod/enkfgdas.\"); //the payload for the download command\nnewPayload += year; //add the year\n\n//month formatting\nif(month < 10)\n{\n    newPayload  += String(\"0\"+(month+1));\n}\nelse\n{\n    newPayload += String(month+1);\n}\n\n//day formatting\nif(day < 10)\n{\n    newPayload += String(\"0\"+day);\n}\nelse\n{\n    newPayload += String(day);\n}\n\n//Finding out what time of day to download the data\nvar modHours = Math.floor(hours / 6);\nvar hold = \"\"; //holds the formatted hours (quarter of day)\nif(modHours < 2){   //00 06\n    hold = String(\"0\" + modHours*6);\n}\nelse{               //12 18\n    hold = String(modHours*6);\n}\n\n//adds to the command format\nnewPayload += String(\"/\" + hold + \"/atmos/mem\");\n\nvar dirMsg = []; //directory creation array\nvar downMsg = []; //download command array\n\nfor(let i=1; i <= 80; i++){ //run for each of the folders of data (80 times)\n    if(i<10){ //formatting of folders < 10\n        dirMsg.push({payload:String(\"/data/ecmwf-data/mem00\" + i)});\n        //the 3 commands for downloading\n        for(let j=1; j<=3; j++){\n            downMsg.push({payload:String(\"-P /data/ecmwf-data/mem00\" + i + \"/ \" + newPayload + \"00\" + i + \"/gdas.t\" + hold + \"z.sfcf00\" + j*3 + \".nc\")});\n        }\n    }\n    else{\n        dirMsg.push({payload:String(\"/data/ecmwf-data/mem0\" + i)});\n        //the 3 commands for downloading\n        for(let j=1; j<=3; j++){\n            downMsg.push({payload:String(\"-P /data/ecmwf-data/mem0\" + i + \"/ \" + newPayload + \"0\" + i + \"/gdas.t\" + hold + \"z.sfcf00\" + j*3 + \".nc\")});\n        }\n    }\n}\n\n//output1 = array of commands to make directory; output2 = array of commands to download each of the netCDF data files\nreturn [dirMsg, downMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "d18b604d0eedd0c5"
            ],
            [
                "f7d0c94641c98af7"
            ]
        ]
    },
    {
        "id": "45cf630c80acc01a",
        "type": "debug",
        "z": "abe7cd58d86f0bc8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 300,
        "wires": []
    },
    {
        "id": "5f5a5dcad368ef09",
        "type": "exec",
        "z": "abe7cd58d86f0bc8",
        "command": "wget ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 850,
        "y": 200,
        "wires": [
            [],
            [
                "45cf630c80acc01a"
            ],
            []
        ]
    },
    {
        "id": "d18b604d0eedd0c5",
        "type": "exec",
        "z": "abe7cd58d86f0bc8",
        "command": "mkdir -p ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 660,
        "y": 120,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "f7d0c94641c98af7",
        "type": "delay",
        "z": "abe7cd58d86f0bc8",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 200,
        "wires": [
            [
                "5f5a5dcad368ef09"
            ]
        ]
    }
]