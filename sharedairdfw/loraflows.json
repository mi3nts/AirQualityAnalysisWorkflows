[
    {
        "id": "b44edfff80da0ecb",
        "type": "tab",
        "label": "LoRa Node to InfluxDB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9c8cb7de31fcbeef",
        "type": "mqtt in",
        "z": "b44edfff80da0ecb",
        "name": "Read ALL",
        "topic": "utd/lora/app/2/device/+/event/up",
        "qos": "2",
        "datatype": "auto",
        "broker": "13a2a6da2720468e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 320,
        "wires": [
            [
                "64a95fd344edcfe2",
                "f63d50945dfe58be"
            ]
        ]
    },
    {
        "id": "f63d50945dfe58be",
        "type": "json",
        "z": "b44edfff80da0ecb",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 410,
        "y": 320,
        "wires": [
            [
                "be5af487815a3eef",
                "6842602508899c36"
            ]
        ]
    },
    {
        "id": "64a95fd344edcfe2",
        "type": "debug",
        "z": "b44edfff80da0ecb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 460,
        "wires": []
    },
    {
        "id": "be5af487815a3eef",
        "type": "debug",
        "z": "b44edfff80da0ecb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 460,
        "wires": []
    },
    {
        "id": "6842602508899c36",
        "type": "function",
        "z": "b44edfff80da0ecb",
        "name": "LoRaSummaryWrite",
        "func": "portIDs = {\n    11: \"OPCN2\",\n    13: \"OPCN3\",\n    15: \"IPS7100\",\n    23: \"BME680\",\n    21: \"BME280\",\n    33: \"SCD30\",\n    31: \"MGS001\",\n    5: \"GPGGALR\",\n    3: \"INA219Duo\",\n    2: \"PM\",\n    1: \"LoRaDefault\",\n};\n\n\nmsg.payload =\n    {\n        sensorID: portIDs[msg.payload.fPort],\n        framePort: msg.payload.fPort,\n        //base16data: Buffer.from(msg.payload.data).toString('base64').toString('hex'),\n        base16data: Buffer.from(msg.payload.data, 'base64').toString('hex'),\n\n        //gatewayID: Buffer.from(msg.payload.rxInfo[0].gatewayID).toString('base64').toString('hex'),\n        gatewayID: Buffer.from(msg.payload.rxInfo[0].gatewayID, 'base64').toString('hex'),\n        \n        nodeID: msg.topic.split(\"/\")[5]\n    };\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 320,
        "wires": [
            [
                "e40c3b22a24d9eb7",
                "b962b6ee4261184e"
            ]
        ]
    },
    {
        "id": "e40c3b22a24d9eb7",
        "type": "debug",
        "z": "b44edfff80da0ecb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 240,
        "wires": []
    },
    {
        "id": "b962b6ee4261184e",
        "type": "switch",
        "z": "b44edfff80da0ecb",
        "name": "SensorIDCheck",
        "property": "payload.sensorID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "IPS7100",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BME280",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SCD30",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "INA219Duo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "MGS001",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PM",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GPGGALR",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 980,
        "y": 320,
        "wires": [
            [
                "39e83a037102e3e1"
            ],
            [
                "aa018634e3f1d940"
            ],
            [
                "2e760f3050c884c4"
            ],
            [
                "d78d7389e9eb0dc5"
            ],
            [
                "208ea1244486b359"
            ],
            [
                "2677e065208970cf"
            ],
            [
                "565ba56ef806b401"
            ]
        ]
    },
    {
        "id": "ad9565dd3840cf1c",
        "type": "debug",
        "z": "b44edfff80da0ecb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 100,
        "wires": []
    },
    {
        "id": "f751c36d276bdcf7",
        "type": "debug",
        "z": "b44edfff80da0ecb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 160,
        "wires": []
    },
    {
        "id": "5483187b79041271",
        "type": "debug",
        "z": "b44edfff80da0ecb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 220,
        "wires": []
    },
    {
        "id": "2259b78610cbfb38",
        "type": "debug",
        "z": "b44edfff80da0ecb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 280,
        "wires": []
    },
    {
        "id": "2f6c19eaa27aa369",
        "type": "debug",
        "z": "b44edfff80da0ecb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 340,
        "wires": []
    },
    {
        "id": "323c60badb4cc0d1",
        "type": "debug",
        "z": "b44edfff80da0ecb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 400,
        "wires": []
    },
    {
        "id": "3080e9d1dd0f8118",
        "type": "debug",
        "z": "b44edfff80da0ecb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 460,
        "wires": []
    },
    {
        "id": "39e83a037102e3e1",
        "type": "function",
        "z": "b44edfff80da0ecb",
        "name": "IPS7100 Unpack",
        "func": "rawdata = msg.payload.base16data;\n\nmsg.measurement = msg.payload.sensorID;\n\nmsg.payload = [\n    {\n        pc0_1: Buffer.from(rawdata.slice(0, 8), 'hex').readUInt32LE(),\n        pc0_3: Buffer.from(rawdata.slice(8, 16), 'hex').readUInt32LE(),\n        pc0_5: Buffer.from(rawdata.slice(16, 24), 'hex').readUInt32LE(),\n        pc1_0: Buffer.from(rawdata.slice(24, 32), 'hex').readUInt32LE(),\n        pc2_5: Buffer.from(rawdata.slice(32, 40), 'hex').readUInt32LE(),\n        pc5_0: Buffer.from(rawdata.slice(40, 48), 'hex').readUInt32LE(),\n        pc10_0: Buffer.from(rawdata.slice(48, 56), 'hex').readUInt32LE(),\n        \n        pm0_1: Buffer.from(rawdata.slice(56, 64), 'hex').readFloatLE(),\n        pm0_3: Buffer.from(rawdata.slice(64, 72), 'hex').readFloatLE(),\n        pm0_5: Buffer.from(rawdata.slice(72, 80), 'hex').readFloatLE(),\n        pm1_0: Buffer.from(rawdata.slice(80, 88), 'hex').readFloatLE(),\n        pm2_5: Buffer.from(rawdata.slice(88, 96), 'hex').readFloatLE(),\n        pm5_0: Buffer.from(rawdata.slice(96, 104), 'hex').readFloatLE(),\n        pm10_0: Buffer.from(rawdata.slice(104, 112), 'hex').readFloatLE(),\n    },\n    {\n        location: msg.payload.nodeID\n    },\n];\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 120,
        "wires": [
            [
                "ad9565dd3840cf1c",
                "5760de8d057cac8a"
            ]
        ]
    },
    {
        "id": "5760de8d057cac8a",
        "type": "influxdb out",
        "z": "b44edfff80da0ecb",
        "influxdb": "6d81027f06ed63bd",
        "name": "IPS7100 Write",
        "measurement": "",
        "precision": "n",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "MINTS",
        "bucket": "SharedAirDFW",
        "x": 1660,
        "y": 120,
        "wires": []
    },
    {
        "id": "aa018634e3f1d940",
        "type": "function",
        "z": "b44edfff80da0ecb",
        "name": "BME280 Unpack",
        "func": "rawdata = msg.payload.base16data;\n\nmsg.measurement = msg.payload.sensorID;\n\nmsg.payload = [\n    {\n        temperature: Buffer.from(rawdata.slice(0, 8), 'hex').readFloatLE(),\n        pressure: Buffer.from(rawdata.slice(8, 16), 'hex').readFloatLE(),\n        humidity: Buffer.from(rawdata.slice(16, 24), 'hex').readFloatLE(),\n    },\n    {\n        location: msg.payload.nodeID\n    },\n];\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 180,
        "wires": [
            [
                "f751c36d276bdcf7",
                "01c6127270dc2da4"
            ]
        ]
    },
    {
        "id": "01c6127270dc2da4",
        "type": "influxdb out",
        "z": "b44edfff80da0ecb",
        "influxdb": "6d81027f06ed63bd",
        "name": "BME280 Write",
        "measurement": "",
        "precision": "n",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "MINTS",
        "bucket": "SharedAirDFW",
        "x": 1660,
        "y": 180,
        "wires": []
    },
    {
        "id": "2e760f3050c884c4",
        "type": "function",
        "z": "b44edfff80da0ecb",
        "name": "SCD30 Unpack",
        "func": "rawdata = msg.payload.base16data;\n\nmsg.measurement = msg.payload.sensorID;\n\nmsg.payload = [\n    {\n        co2: Buffer.from(rawdata.slice(0, 8), 'hex').readFloatLE(),\n        temperature: Buffer.from(rawdata.slice(8, 16), 'hex').readFloatLE(),\n        humidity: Buffer.from(rawdata.slice(16, 24), 'hex').readFloatLE(),\n    },\n    {\n        location: msg.payload.nodeID\n    },\n];\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 240,
        "wires": [
            [
                "5483187b79041271",
                "fc51bf7a65b8881b"
            ]
        ]
    },
    {
        "id": "fc51bf7a65b8881b",
        "type": "influxdb out",
        "z": "b44edfff80da0ecb",
        "influxdb": "6d81027f06ed63bd",
        "name": "SCD30 Write",
        "measurement": "",
        "precision": "n",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "MINTS",
        "bucket": "SharedAirDFW",
        "x": 1650,
        "y": 240,
        "wires": []
    },
    {
        "id": "d78d7389e9eb0dc5",
        "type": "function",
        "z": "b44edfff80da0ecb",
        "name": "INA219Duo Unpack",
        "func": "rawdata = msg.payload.base16data;\n\nmsg.measurement = msg.payload.sensorID;\n\nmsg.payload = [\n    {\n        shuntVoltageBattery: Buffer.from(rawdata.slice(0, 8), 'hex').readFloatLE(),\n        busVoltageBattery: Buffer.from(rawdata.slice(8, 16), 'hex').readFloatLE(),\n        currentBattery: Buffer.from(rawdata.slice(16, 24), 'hex').readFloatLE(),\n        powerBattery: Buffer.from(rawdata.slice(24, 32), 'hex').readFloatLE(),\n        shuntVoltageSolar: Buffer.from(rawdata.slice(32, 40), 'hex').readFloatLE(),\n        busVoltageSolar: Buffer.from(rawdata.slice(40, 48), 'hex').readFloatLE(),\n        currentSolar: Buffer.from(rawdata.slice(48, 56), 'hex').readFloatLE(),\n        powerSolar: Buffer.from(rawdata.slice(56, 64), 'hex').readFloatLE(),\n\n    },\n    {\n        location: msg.payload.nodeID\n    },\n];\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 300,
        "wires": [
            [
                "2259b78610cbfb38",
                "14c9c2585fdf7f29"
            ]
        ]
    },
    {
        "id": "14c9c2585fdf7f29",
        "type": "influxdb out",
        "z": "b44edfff80da0ecb",
        "influxdb": "6d81027f06ed63bd",
        "name": "INA219Duo Write",
        "measurement": "",
        "precision": "n",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "MINTS",
        "bucket": "SharedAirDFW",
        "x": 1670,
        "y": 300,
        "wires": []
    },
    {
        "id": "208ea1244486b359",
        "type": "function",
        "z": "b44edfff80da0ecb",
        "name": "MGS001 Unpack",
        "func": "rawdata = msg.payload.base16data;\n\nmsg.measurement = msg.payload.sensorID;\n\nmsg.payload = [\n    {\n        c2h5oh: Buffer.from(rawdata.slice(0, 8), 'hex').readFloatLE(),\n        c3h8: Buffer.from(rawdata.slice(8, 16), 'hex').readFloatLE(),\n        c4h10: Buffer.from(rawdata.slice(16, 24), 'hex').readFloatLE(),\n        ch4: Buffer.from(rawdata.slice(24, 32), 'hex').readFloatLE(),\n        co: Buffer.from(rawdata.slice(32, 40), 'hex').readFloatLE(),\n        h2: Buffer.from(rawdata.slice(40, 48), 'hex').readFloatLE(),\n        nh3: Buffer.from(rawdata.slice(48, 56), 'hex').readFloatLE(),\n        no2: Buffer.from(rawdata.slice(56, 64), 'hex').readFloatLE(),\n\n    },\n    {\n        location: msg.payload.nodeID\n    },\n];\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 360,
        "wires": [
            [
                "e91959272228d707",
                "2f6c19eaa27aa369"
            ]
        ]
    },
    {
        "id": "e91959272228d707",
        "type": "influxdb out",
        "z": "b44edfff80da0ecb",
        "influxdb": "6d81027f06ed63bd",
        "name": "MGS001 Write",
        "measurement": "",
        "precision": "n",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "MINTS",
        "bucket": "SharedAirDFW",
        "x": 1660,
        "y": 360,
        "wires": []
    },
    {
        "id": "2677e065208970cf",
        "type": "function",
        "z": "b44edfff80da0ecb",
        "name": "PM Unpack",
        "func": "rawdata = msg.payload.base16data;\n\nmsg.measurement = msg.payload.sensorID;\n\nmsg.payload = [\n    {\n        powerMode: Buffer.from(rawdata.slice(0,2), 'hex').readUInt8(),\n\n    },\n    {\n        location: msg.payload.nodeID\n    },\n];\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 420,
        "wires": [
            [
                "323c60badb4cc0d1",
                "7e64c5e26e3dac86"
            ]
        ]
    },
    {
        "id": "7e64c5e26e3dac86",
        "type": "influxdb out",
        "z": "b44edfff80da0ecb",
        "influxdb": "6d81027f06ed63bd",
        "name": "PM Write",
        "measurement": "",
        "precision": "n",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "MINTS",
        "bucket": "SharedAirDFW",
        "x": 1640,
        "y": 420,
        "wires": []
    },
    {
        "id": "565ba56ef806b401",
        "type": "function",
        "z": "b44edfff80da0ecb",
        "name": "GPGGALR Unpack",
        "func": "rawdata = msg.payload.base16data;\n\nmsg.measurement = msg.payload.sensorID;\n\nmsg.payload = [\n    {\n        latitude: Buffer.from(rawdata.slice(0, 16), 'hex').readDoubleLE(),\n        longitude: Buffer.from(rawdata.slice(16, 32), 'hex').readDoubleLE(),\n        speed: Buffer.from(rawdata.slice(32, 48), 'hex').readDoubleLE(),\n        altitude: Buffer.from(rawdata.slice(48, 64), 'hex').readDoubleLE(),\n        course: Buffer.from(rawdata.slice(64, 80), 'hex').readDoubleLE(),\n        HDOP: Buffer.from(rawdata.slice(80, 96), 'hex').readDoubleLE(),\n        year: Buffer.from(rawdata.slice(96, 100), 'hex').readUInt16LE(),\n        month: Buffer.from(rawdata.slice(100, 102), 'hex').readUInt8(),\n        day: Buffer.from(rawdata.slice(102, 104), 'hex').readUInt8(),\n        hour: Buffer.from(rawdata.slice(104, 106), 'hex').readUInt8(),\n        minute: Buffer.from(rawdata.slice(106, 108), 'hex').readUInt8(),\n        second: Buffer.from(rawdata.slice(108, 110), 'hex').readUInt8(),\n        \n\n    },\n    {\n        location: msg.payload.nodeID\n    },\n];\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 480,
        "wires": [
            [
                "1d899f263a84644d",
                "3080e9d1dd0f8118"
            ]
        ]
    },
    {
        "id": "1d899f263a84644d",
        "type": "influxdb out",
        "z": "b44edfff80da0ecb",
        "influxdb": "6d81027f06ed63bd",
        "name": "GPGGALR Write",
        "measurement": "",
        "precision": "n",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ns",
        "retentionPolicyV18Flux": "",
        "org": "MINTS",
        "bucket": "SharedAirDFW",
        "x": 1670,
        "y": 480,
        "wires": []
    },
    {
        "id": "13a2a6da2720468e",
        "type": "mqtt-broker",
        "name": "Lora Nodes Reader",
        "broker": "mqtt.lora.trecis.cloud",
        "port": "1883",
        "tls": "910f682d4a225c76",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "6d81027f06ed63bd",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "a262c54bb2fd3604",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "910f682d4a225c76",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "ca-certificates.crt",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "a262c54bb2fd3604",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "ca-certificates.crt",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    }
]